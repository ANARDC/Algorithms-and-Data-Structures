/*
 * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º:
 * 1. –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ
 * 2. –û–±–º–µ–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
 * 3. –ü–æ–≤—Ç–æ—Ä —ç—Ç–∏—Ö —à–∞–≥–æ–≤ –¥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞: O(n^2)
 */

extension Array where Iterator.Element: Comparable {
  var selectionSorted: Array<Element> {
    var array = self
    
    for i in 0..<array.count {
      for j in i..<array.count {
        if array[j] < array[i] {
          (array[i], array[j]) = (array[j], array[i])
        }
      }
    }
    
    return array
  }
}

print(((-5...5).shuffled() + (-5...5).shuffled()).selectionSorted)
print(["Smith", "John", "üôÉ", "üôÇ"].selectionSorted)

/*
 * Output:
 * [-5, -5, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]
 * ["John", "Smith", "üôÇ", "üôÉ"]
 */
