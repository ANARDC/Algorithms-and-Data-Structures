/*
 * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—É–∑—ã—Ä—å–∫–æ–º:
 * –ú–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–æ–≤ –ø—É—Ç–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏
 * –æ–±–º–µ–Ω–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–π –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è
 * –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞: O(n^2)
 */

extension Array where Iterator.Element: Comparable {
  var bubbleSorted: Array<Element> {
    guard self.count > 1 else { return self }
    
    var array = self
    
    for i in array.indices[0..<array.count - 1] {
      for j in array.indices[0..<array.count - 1 - i] {
        if array[j] > array[j+1] {
          (array[j], array[j+1]) = (array[j+1], array[j])
        }
      }
    }
    
    return array
  }
}

print(((-5...5).shuffled() + (-5...5).shuffled()).bubbleSorted)
print(["Smith", "John", "üôÉ", "üôÇ"].bubbleSorted)

/*
 * Output:
 * [-5, -5, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]
 * ["John", "Smith", "üôÇ", "üôÉ"]
 */
