/*
 * –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
 * –£—Å–ª–æ–≤–∏–µ:
 * * –ú–∞—Å—Å–∏–≤ a[0], a[1], ..., a[n]
 * * –û–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç p
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –º–µ–Ω—å—à–∏—Ö –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —á–µ–º "p", —Ä–∞–≤–Ω—ã—Ö "p" –∏ –±–æ–ª—å—à–∏—Ö "p"
 * 2. –ö —ç–ª–µ–º–µ–Ω—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—å—à–µ –∏ –±–æ–ª—å—à–µ —á–µ–º "p" –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
 * 3. –ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞ –º–µ–Ω—å—à–∏—Ö —á–µ–º "p" –∏ –±–æ–ª—å—à–∏—Ö —á–µ–º "p" –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É—é—Ç—Å—è —Ä–∞–≤–Ω—ã–µ "p"
 * 4. –®–∞–≥ 3 –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –Ω–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–¥–º–∞—Å—Å–∏–≤—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å:
 * * –°—Ä–µ–¥–Ω—è—è: O(n log n)
 * * –•—É–¥—à–∞—è: O(n^2)
 */

extension Array where Element: Comparable {
  var quickSorted: Array<Element> {
    self.count > 1 ? [self.filter { $0 < self[0] }.quickSorted,
                      self.filter { $0 == self[0] },
                      self.filter { $0 > self[0] }.quickSorted].reduce([], +) : self
  }
}

print(((-5...5).shuffled() + (-5...5).shuffled()).quickSorted)
print(["Smith", "John", "üôÉ", "üôÇ"].quickSorted)

/*
 * Output:
 * [-5, -5, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]
 * ["John", "Smith", "üôÇ", "üôÉ"]
 */
