/*
 * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏:
 * –ú–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–æ–≤ –ø—É—Ç–µ–º –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 * –∏–∑ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞ –∏ –≤—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ
 * –≤ –º–∞—Å—Å–∏–≤–µ —Å —Å–¥–≤–∏–≥–æ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏.
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞: O(n^2)
 */

extension Array where Element: Comparable {
  var insertionSorted: Array<Element> {
    var array = self
    
    for i in 1..<array.count {
      let current = array[i]
      var j = i - 1
      
      while j >= 0 && array[j] > current {
        array[j+1] = array[j]
        j -= 1
      }
      
      array[j+1] = current
    }
    
    return array
  }
}

print(((-5...5).shuffled() + (-5...5).shuffled()).insertionSorted)
print(["Smith", "John", "üôÉ", "üôÇ"].insertionSorted)

/*
 * Output:
 * [-5, -5, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]
 * ["John", "Smith", "üôÇ", "üôÉ"]
 */
